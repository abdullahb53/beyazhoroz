// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: furkan_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FurkanServiceClient is the client API for FurkanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FurkanServiceClient interface {
	CreateUser(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserCreateRes, error)
	ListUsers(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error)
	FindUser(ctx context.Context, in *UserFindReq, opts ...grpc.CallOption) (*UserFindRes, error)
	DeleteUser(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteRes, error)
	UpdateUser(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateRes, error)
}

type furkanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFurkanServiceClient(cc grpc.ClientConnInterface) FurkanServiceClient {
	return &furkanServiceClient{cc}
}

func (c *furkanServiceClient) CreateUser(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserCreateRes, error) {
	out := new(UserCreateRes)
	err := c.cc.Invoke(ctx, "/FurkanService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furkanServiceClient) ListUsers(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error) {
	out := new(UserListRes)
	err := c.cc.Invoke(ctx, "/FurkanService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furkanServiceClient) FindUser(ctx context.Context, in *UserFindReq, opts ...grpc.CallOption) (*UserFindRes, error) {
	out := new(UserFindRes)
	err := c.cc.Invoke(ctx, "/FurkanService/FindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furkanServiceClient) DeleteUser(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteRes, error) {
	out := new(UserDeleteRes)
	err := c.cc.Invoke(ctx, "/FurkanService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *furkanServiceClient) UpdateUser(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateRes, error) {
	out := new(UserUpdateRes)
	err := c.cc.Invoke(ctx, "/FurkanService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FurkanServiceServer is the server API for FurkanService service.
// All implementations must embed UnimplementedFurkanServiceServer
// for forward compatibility
type FurkanServiceServer interface {
	CreateUser(context.Context, *UserCreateReq) (*UserCreateRes, error)
	ListUsers(context.Context, *UserListReq) (*UserListRes, error)
	FindUser(context.Context, *UserFindReq) (*UserFindRes, error)
	DeleteUser(context.Context, *UserDeleteReq) (*UserDeleteRes, error)
	UpdateUser(context.Context, *UserUpdateReq) (*UserUpdateRes, error)
	mustEmbedUnimplementedFurkanServiceServer()
}

// UnimplementedFurkanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFurkanServiceServer struct {
}

func (UnimplementedFurkanServiceServer) CreateUser(context.Context, *UserCreateReq) (*UserCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedFurkanServiceServer) ListUsers(context.Context, *UserListReq) (*UserListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedFurkanServiceServer) FindUser(context.Context, *UserFindReq) (*UserFindRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (UnimplementedFurkanServiceServer) DeleteUser(context.Context, *UserDeleteReq) (*UserDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedFurkanServiceServer) UpdateUser(context.Context, *UserUpdateReq) (*UserUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedFurkanServiceServer) mustEmbedUnimplementedFurkanServiceServer() {}

// UnsafeFurkanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FurkanServiceServer will
// result in compilation errors.
type UnsafeFurkanServiceServer interface {
	mustEmbedUnimplementedFurkanServiceServer()
}

func RegisterFurkanServiceServer(s grpc.ServiceRegistrar, srv FurkanServiceServer) {
	s.RegisterService(&FurkanService_ServiceDesc, srv)
}

func _FurkanService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurkanServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FurkanService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurkanServiceServer).CreateUser(ctx, req.(*UserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FurkanService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurkanServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FurkanService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurkanServiceServer).ListUsers(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FurkanService_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurkanServiceServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FurkanService/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurkanServiceServer).FindUser(ctx, req.(*UserFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FurkanService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurkanServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FurkanService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurkanServiceServer).DeleteUser(ctx, req.(*UserDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FurkanService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FurkanServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FurkanService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FurkanServiceServer).UpdateUser(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FurkanService_ServiceDesc is the grpc.ServiceDesc for FurkanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FurkanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FurkanService",
	HandlerType: (*FurkanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _FurkanService_CreateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _FurkanService_ListUsers_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _FurkanService_FindUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _FurkanService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _FurkanService_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "furkan_service.proto",
}
